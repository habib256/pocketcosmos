/**
 * @file train.js
 * Script de d√©monstration pour l'entra√Ænement de l'agent IA
 * Utilise l'environnement headless pour un entra√Ænement rapide
 */

// Configuration pour le mode d√©mo d'entra√Ænement
const TRAINING_DEMO_CONFIG = {
    maxEpisodes: 500,
    maxStepsPerEpisode: 1000,
    targetSuccessRate: 0.7,
    evaluationInterval: 50,
    checkpointInterval: 100,
    
    // Hyperparam√®tres optimis√©s pour la d√©mo
    learningRate: 0.002,
    epsilon: 1.0,
    epsilonMin: 0.15,
    epsilonDecay: 0.995,
    gamma: 0.99,
    batchSize: 32,
    replayBufferSize: 10000,
    
    logInterval: 25,
    headlessMode: true
};

/**
 * Fonction principale de d√©monstration d'entra√Ænement
 */
async function demonstrateTraining() {
    console.log('üöÄ D√©monstration d\'entra√Ænement d\'IA pour la simulation de fus√©e');
    console.log('===============================================================');
    
    try {
        // Initialisation des composants n√©cessaires
        const eventBus = new EventBus();
        const trainingOrchestrator = new TrainingOrchestrator(eventBus);
        
        // Configuration des √©couteurs d'√©v√©nements pour le suivi
        setupTrainingEventListeners(eventBus);
        
        console.log('üìä Configuration d\'entra√Ænement:');
        console.table(TRAINING_DEMO_CONFIG);
        
        // D√©marrage de l'entra√Ænement
        console.log('\nüéØ D√©marrage de l\'entra√Ænement...');
        await trainingOrchestrator.startTraining(TRAINING_DEMO_CONFIG);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de la d√©monstration:', error);
    }
}

/**
 * Configure les √©couteurs d'√©v√©nements pour suivre l'entra√Ænement
 */
function setupTrainingEventListeners(eventBus) {
    // D√©but d'entra√Ænement
    eventBus.subscribe(window.EVENTS.AI.TRAINING_STARTED, (data) => {
        console.log('‚úÖ Entra√Ænement d√©marr√© √†', new Date(data.timestamp).toLocaleTimeString());
    });
    
    // Progression de l'entra√Ænement
    eventBus.subscribe(window.EVENTS.AI.TRAINING_PROGRESS, (data) => {
        if (data.episode % 50 === 0) { // Log tous les 50 √©pisodes
            const metrics = data.metrics;
            const avgReward = metrics.averageRewards.length > 0 ? 
                metrics.averageRewards.reduce((a, b) => a + b, 0) / metrics.averageRewards.length : 0;
            const successRate = (metrics.successfulEpisodes / metrics.episode * 100).toFixed(1);
            
            console.log(`üìà √âpisode ${data.episode}/${data.config.maxEpisodes}: ` +
                       `R√©compense moy=${avgReward.toFixed(2)}, ` +
                       `Succ√®s=${successRate}%, ` +
                       `Exploration=${(data.metrics.explorationRates[data.metrics.explorationRates.length - 1] || 0).toFixed(3)}`);
        }
    });
    
    // √âvaluations
    eventBus.subscribe(window.EVENTS.AI.EVALUATION_COMPLETED, (data) => {
        console.log(`üéØ √âvaluation √† l'√©pisode ${data.episode}: ` +
                   `Score=${data.averageScore.toFixed(2)}, ` +
                   `Succ√®s=${(data.successRate * 100).toFixed(1)}%, ` +
                   `Meilleur=${data.bestScore.toFixed(2)}`);
    });
    
    // Fin d'entra√Ænement
    eventBus.subscribe(window.EVENTS.AI.TRAINING_COMPLETED, (stats) => {
        console.log('\nüéâ Entra√Ænement termin√©!');
        console.log('===============================');
        console.log(`üìä Statistiques finales:`);
        console.log(`   √âpisodes: ${stats.episodes}`);
        console.log(`   √âtapes totales: ${stats.totalSteps}`);
        console.log(`   Dur√©e: ${(stats.trainingDuration / 1000 / 60).toFixed(1)} minutes`);
        console.log(`   Taux de succ√®s final: ${(stats.finalSuccessRate * 100).toFixed(1)}%`);
        console.log(`   Meilleure r√©compense: ${stats.bestAverageReward.toFixed(2)}`);
        console.log(`   Dur√©e moyenne d'√©pisode: ${stats.averageEpisodeLength.toFixed(0)} √©tapes`);
        
        // Suggestions d'am√©lioration
        provideFeedback(stats);
    });
    
    // Erreurs
    eventBus.subscribe(window.EVENTS.AI.TRAINING_ERROR, (data) => {
        console.error('‚ùå Erreur d\'entra√Ænement:', data.error);
    });
}

/**
 * Fournit un retour sur les performances et suggestions d'am√©lioration
 */
function provideFeedback(stats) {
    console.log('\nüí° Analyse et recommandations:');
    console.log('===============================');
    
    if (stats.finalSuccessRate < 0.3) {
        console.log('‚ö†Ô∏è  Taux de succ√®s faible. Suggestions:');
        console.log('   - Augmenter le nombre d\'√©pisodes d\'entra√Ænement');
        console.log('   - R√©duire le taux d\'apprentissage (learningRate)');
        console.log('   - Ajuster la fonction de r√©compense');
        console.log('   - V√©rifier la normalisation des √©tats');
    } else if (stats.finalSuccessRate < 0.6) {
        console.log('‚ö° Performances mod√©r√©es. Am√©liorations possibles:');
        console.log('   - Augmenter la taille du replay buffer');
        console.log('   - Ajuster epsilon decay pour plus d\'exploration');
        console.log('   - Optimiser l\'architecture du r√©seau');
    } else {
        console.log('üåü Excellentes performances! L\'agent a bien appris.');
        console.log('   - Tester sur des sc√©narios plus complexes');
        console.log('   - Exp√©rimenter avec different objectifs');
        console.log('   - Sauvegarder ce mod√®le comme r√©f√©rence');
    }
    
    if (stats.averageEpisodeLength > stats.episodes * 0.8) {
        console.log('‚è±Ô∏è  √âpisodes tr√®s longs d√©tect√©s:');
        console.log('   - L\'agent pourrait √™tre bloqu√© dans certains √©tats');
        console.log('   - Consid√©rer une r√©compense de forme (shaping reward)');
        console.log('   - R√©duire maxStepsPerEpisode pour forcer des d√©cisions');
    }
    
    console.log('\nüî¨ Pour des analyses plus pouss√©es:');
    console.log('   - Visualiser les courbes d\'apprentissage');
    console.log('   - Analyser la distribution des actions');
    console.log('   - Tester l\'agent sur des scenarios sp√©cifiques');
    console.log('   - Comparer avec des baselines (contr√¥le al√©atoire, PID, etc.)');
}

/**
 * Fonction d'entra√Ænement rapide pour tests
 */
async function quickTraining() {
    const quickConfig = {
        ...TRAINING_DEMO_CONFIG,
        maxEpisodes: 100,
        evaluationInterval: 20,
        checkpointInterval: 50,
        logInterval: 10
    };
    
    console.log('‚ö° Entra√Ænement rapide (100 √©pisodes)...');
    
    const eventBus = new EventBus();
    const trainingOrchestrator = new TrainingOrchestrator(eventBus);
    setupTrainingEventListeners(eventBus);
    
    await trainingOrchestrator.startTraining(quickConfig);
}

/**
 * Test de performance de l'environnement headless
 */
async function benchmarkEnvironment() {
    console.log('üèÉ‚Äç‚ôÇÔ∏è Test de performance de l\'environnement...');
    
    const env = new HeadlessRocketEnvironment({
        maxStepsPerEpisode: 1000,
        rocketInitialState: {
            position: { x: 0, y: 0 },
            velocity: { x: 0, y: 0 },
            fuel: ROCKET.FUEL_CAPACITY,
            health: 100
        }
    });
    
    const numEpisodes = 10;
    const startTime = Date.now();
    
    for (let i = 0; i < numEpisodes; i++) {
        let state = env.reset();
        let done = false;
        let steps = 0;
        
        while (!done && steps < 1000) {
            // Action al√©atoire pour le test
            const action = {
                mainThruster: Math.random() > 0.7 ? 1.0 : 0,
                rotationInput: (Math.random() - 0.5) * 2
            };
            
            const result = env.step(action);
            state = result.observation;
            done = result.done;
            steps++;
        }
    }
    
    const duration = Date.now() - startTime;
    const stepsPerSecond = (numEpisodes * 1000) / (duration / 1000);
    
    console.log(`‚ö° Performance: ${stepsPerSecond.toFixed(0)} √©tapes/seconde`);
    console.log(`üìä ${numEpisodes} √©pisodes en ${duration}ms`);
}

// Exportation pour utilisation dans la console du navigateur
if (typeof window !== 'undefined') {
    window.demonstrateTraining = demonstrateTraining;
    window.quickTraining = quickTraining;
    window.benchmarkEnvironment = benchmarkEnvironment;
    
    // Instructions pour l'utilisateur
    console.log('\nüéÆ Commandes disponibles dans la console:');
    console.log('   demonstrateTraining() - D√©mo compl√®te d\'entra√Ænement');
    console.log('   quickTraining() - Entra√Ænement rapide (100 √©pisodes)');
    console.log('   benchmarkEnvironment() - Test de performance');
}

// Exportation pour Node.js (si applicable)
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        demonstrateTraining,
        quickTraining,
        benchmarkEnvironment,
        TRAINING_DEMO_CONFIG
    };
} 